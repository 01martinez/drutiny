# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  cache.directory: ~/.drutiny/cache
  cache.ttl: 0
  config.local: ~/.drutiny/config.yml
  config.credentials: ~/.drutiny/.credentials.yml
  twig.templates: twig
  twig.cache: false #~/.drutiny/cache/twig
  twig.debug: true
  twig.strict: true
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: true

    _instanceof:
      # Any symfony commands found can be loaded in as drutiny commands.
      # Drutiny uses the "command" tag to load commands into the Console
      # Application.
      Symfony\Component\Console\Command\Command:
        tags: [command]

      # Drutiny pulls any class tagged as "profile.source" as a source to load
      # profiles from.
      Drutiny\ProfileSource\ProfileSourceInterface:
        tags: [profile.source]

      # Drutiny pulls any class tagged as "policy.source" as a source to load
      # policies from.
      Drutiny\PolicySource\PolicySourceInterface:
        tags: [policy.source]

      # Drutiny pulls any class tagged as "format" as a source to load
      # reporting formats from (e.g. json, html, markdown, etc).
      Drutiny\Report\FormatInterface:
        tags: [format]

      # Drutiny pulls any class tagged as "domain_list" as a source to load
      # Domain Lists of a target from.
      Drutiny\DomainList\DomainListInterface:
        tags: [domain_list]

    cache.array:
        class: Symfony\Component\Cache\Adapter\ArrayAdapter
        arguments: ['%cache.ttl%']
        calls:
          - [setLogger, ['@logger']]

    cache.filesystem:
        class: Symfony\Component\Cache\Adapter\FilesystemAdapter
        arguments: [drutiny, '%cache.ttl%', '%cache.directory%']
        calls:
          - [setLogger, ['@logger']]
          - [prune]

    yaml:
      class: Symfony\Component\Yaml\Yaml
      public: false

    # Parse a local config file to use as config overrides for the local
    # instance of drutiny.
    config:
      class: Drutiny\ImmuntableConfig
      arguments: ['@=service("yaml").parseFile("%config.local%")']
      autowire: false

    # DomainList provider using YAML files.
    # This is manually mentioned to associate the name "yaml" with the
    # DomainListInterface provider.
    domain_list.yaml:
        class: Drutiny\DomainList\DomainListYamlFile

    # A factory class for producing a reporting format instance.
    format.factory:
      class: Drutiny\Report\FormatFactory

    # The Drutiny Guzzle HTTP factory.
    http.client:
      class: Drutiny\Http\Client

    # Middleware used in the Drutiny Guzzle HTTP client is tagged with the
    # tag "http.middleware".
    http.middleware:
      namespace: Drutiny\Http\Middleware\
      resource: 'src/Http/Middleware/*'
      arguments: ['@service_container', '@config']
      tags: [http.middleware]

    # Default logger echoes logs out to the console.
    logger:
      alias: Symfony\Component\Console\Logger\ConsoleLogger

    Symfony\Component\Console\Logger\ConsoleLogger:
      arguments:
        - '@output'

    # Default output class echoes out to the console.
    output:
      class: Symfony\Component\Console\Output\ConsoleOutput
      arguments:
        - '@=service("verbosity").get()'

    # Factory for loading policies from their sources.
    policy.factory:
      class: 'Drutiny\PolicyFactory'
      arguments: ['@service_container', '@cache.filesystem']

    # Factory for loading profiles from their sources.
    profile.factory:
      class: 'Drutiny\ProfileFactory'
      arguments: ['@service_container', '@cache.filesystem']

    sandbox:
      class: Drutiny\Sandbox\Sandbox

    target.factory:
      class: Drutiny\Target\TargetFactory

    target.drush:
      factory: ['Drutiny\Target\DrushTarget', 'create']
      class: Drutiny\Target\DrushTarget

    target.none:
      class: Drutiny\Target\TargetNone

    twig.loader:
      class: Twig\Loader\FilesystemLoader
      arguments: [ '%twig.templates%' ]

    twig:
      class: Twig\Environment
      arguments:
        - '@twig.loader'
        - cache: '%twig.cache%'
          debug: '%twig.debug%'
          strict_variables: '%twig.strict'
      calls:
        - [addFilter, ['@twig.filters.array_sum']]
        - [addExtension, ['@Twig\Extension\DebugExtension']]
        - [addExtension, ['@Twig\Extension\StringLoaderExtension']]

    twig.filters.array_sum:
      class: Twig\TwigFilter
      arguments: ['sum', 'array_sum']

    process.manager:
      class: Drutiny\Process\ProcessManager

    verbosity:
        class: Drutiny\Console\Verbosity

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Drutiny\:
        resource: 'src/*'
        exclude:
          - 'src/{ExpressionFunction,DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
          - src/Console/Application.php
          - src/*/*Exception.php
          - src/Sandbox/Sandbox.php
          - src/ExpressionLanguage.php
          - src/Report/Format/Menu/*

    Drutiny\Target\TargetInterface:
      alias: 'target.drush'

    Symfony\Contracts\Cache\CacheInterface:
      alias: 'cache.array'

    Symfony\Component\Console\Output\OutputInterface:
      alias: output

    Symfony\Component\Cache\Adapter\FilesystemAdapter:
      alias: cache.filesystem

    finder:
      class: Symfony\Component\Finder\Finder

    Symfony\Component\Finder\Finder:
      alias: finder

    Psr\Log\LoggerInterface:
      alias: logger

    Twig\Loader\FilesystemLoader:
      alias: 'twig.loader'

    Twig\Environment:
      alias: 'twig'

    Twig\Extension\DebugExtension:
    Twig\Extension\StringLoaderExtension:
